#!/usr/bin/env -S nix shell -I nixpkgs=./. nixpkgs#bash nixpkgs#common-updater-scripts nixpkgs#git nixpkgs#jq nixpkgs#nix-prefetch-github nixpkgs#prefetch-npm-deps -c bash

ROOT_DIR="$(pwd)"

git_push() {
    (
        cd "$ROOT_DIR" || return
        git config --global user.name 'Updater'
        git config --global user.email 'robot@nowhere.invalid'
        git remote update

        git add .

        git commit -m "$1"
        git push
    )
}

updateGithubSrc() {
    owner="$1"
    repo="$2"
    file="./pkgs/$repo/src.nix"

    current_version=$(nix eval --json --file "$file" | jq -r .rev)
    new_version=$(curl -s "https://api.github.com/repos/$owner/$repo/releases/latest" | jq -r .tag_name)

    if [[ "$new_version" != "$current_version" ]]; then
        hash=$(nix-prefetch-github "$owner" "$repo" --rev "$new_version" | jq -r .hash)

        {
            echo '# This file was autogenerated. DO NOT EDIT!'
            echo '{'
            echo "  owner = \"$owner\";"
            echo "  repo = \"$repo\";"
            echo "  rev = \"$new_version\";"
            echo "  hash = \"$hash\";"
            echo '}'
        } >"$file"

        echo "$repo: $current_version -> $new_version"
    else
        echo "$repo is already up to date"
    fi
}

updateSources() {
    updateGithubSrc "jellyfin" "jellyfin"
    updateGithubSrc "jellyfin" "jellyfin-ffmpeg"
    updateGithubSrc "jellyfin" "jellyfin-web"
}

updateNpmDepsHash() {
    file="./pkgs/jellyfin-web/npmDepsHash.nix"
    npm_hash="$(nix build .#jellyfin-web |& sed -n 's/.*got: *//p')"

    if [[ "$npm_hash" != "" ]]; then
        {
            echo '# This file was autogenerated. DO NOT EDIT!'
            echo "\"$npm_hash\""
        } >"$file"

        echo "updated npmDepsHash"
    else
        echo "npmDepsHash is already up to date"
    fi
}

nix flake update
updateSources
updateNpmDepsHash

eval "$(nix build .#jellyfin.fetch-deps --no-link) ./pkgs/jellyfin/nuget-deps.nix"

# TODO: make better message
git_push "ci: update everything"
